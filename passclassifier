import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

class PasswordStrengthClassifier:
    def __init__(self, filepath):
        self.filepath = filepath
        self.data = None
        self.vectorizer = TfidfVectorizer(analyzer='char', lowercase=False, max_features=500)
        self.logreg = LogisticRegression(max_iter=1000)
        self.X_train = None
        self.X_test = None
        self.y_train = None
        self.y_test = None

    def load_data(self):
        self.data = pd.read_csv(self.filepath, delimiter=',', on_bad_lines='skip', engine='python')
        self.data['password'].fillna('', inplace=True)

    def preprocess_data(self):
        X = self.data['password']
        y = self.data['strength']
        X = X.apply(lambda x: x[:20])
        self.X_train, self.X_test, self.y_train, self.y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    def train_model(self):
        X_train_vectorized = self.vectorizer.fit_transform(self.X_train)
        self.logreg.fit(X_train_vectorized, self.y_train)

    def evaluate_model(self):
        X_test_vectorized = self.vectorizer.transform(self.X_test)
        y_pred = self.logreg.predict(X_test_vectorized)
        accuracy = accuracy_score(self.y_test, y_pred)
        print("Model Accuracy:", accuracy)

    def predict_password_strength(self, new_passwords):
        new_passwords_vectorized = self.vectorizer.transform(new_passwords)
        predictions = self.logreg.predict(new_passwords_vectorized)
        print("Predictions for new passwords:")
        for password, prediction in zip(new_passwords, predictions):
            print(f"{password}: {prediction}")

if __name__ == "__main__":
    filepath = 'YOUR-PATH'
    password_classifier = PasswordStrengthClassifier(filepath)
    password_classifier.load_data()
    password_classifier.preprocess_data()
    password_classifier.train_model()
    password_classifier.evaluate_model()

    new_passwords = ['1j%bsQ*<+Ynz','kucing123','##barbie123','ajd1348#28t**','ppppppppp','adfkilws','nanananannanannan','anissajulianty07','anissa','123456','abcdef']
    password_classifier.predict_password_strength(new_passwords)
